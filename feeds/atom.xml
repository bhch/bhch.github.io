<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>bhch</title><link href="https://bhch.github.io/" rel="alternate"></link><link href="https://bhch.github.io/feeds/atom.xml" rel="self"></link><id>https://bhch.github.io/</id><updated>2018-05-27T00:00:00+05:30</updated><entry><title>Serving large files with Tornado safely without blocking</title><link href="https://bhch.github.io/posts/2017/12/serving-large-files-with-tornado-safely-without-blocking/" rel="alternate"></link><updated>2017-12-14T00:00:00+05:30</updated><author><name>bhch</name></author><id>tag:bhch.github.io,2017-12-14:posts/2017/12/serving-large-files-with-tornado-safely-without-blocking/</id><summary type="html">&lt;p&gt;We need to take care of two things while serving large files using Tornado:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It should not eat up our RAM&lt;/li&gt;
&lt;li&gt;It should not block the server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To do that, we'll have to read and send the files in chunks. What that means is we'll 
read a few megabytes and send them, then read the next few megabytes and send them
and we'll keep doing that until we've read and sent the whole file.&lt;/p&gt;
&lt;p&gt;Before moving on, I think it should go without saying that Tornado isn't recommended to serve large 
data. A specialized server, like Nginx, for this purpose should be always be preferred 
when possible. &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The code in this post is written for Python &amp;gt;= 3.5 and I've used the new 
&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; syntax. For older Python version, you can adapt the code 
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Change this ...&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;

&lt;span class="c1"&gt;# To this...&lt;/span&gt;
&lt;span class="nd"&gt;@tornado.gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h1 id="serving-the-files-safely-so-it-doesnt-eat-up-our-ram"&gt;Serving the files safely so it doesn't eat up our RAM&lt;a class="headerlink" href="#serving-the-files-safely-so-it-doesnt-eat-up-our-ram" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We'll read the files in chunks, then write the cunk to the response, and flush 
it to the network socket.&lt;/p&gt;
&lt;p&gt;Reading in chunks and flushing the data to network will ensure that we don't run 
out of RAM.&lt;/p&gt;
&lt;p&gt;Here's a code example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DownloadHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# chunk size to read&lt;/span&gt;
        &lt;span class="n"&gt;chunk_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# 1 MiB&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# write the cunk to response&lt;/span&gt;
                    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# flush the current chunk to socket&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamClosedError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# this means the client has closed the connection&lt;/span&gt;
                    &lt;span class="c1"&gt;# so break the loop&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
                &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# deleting the chunk is very important because &lt;/span&gt;
                    &lt;span class="c1"&gt;# if many clients are downloading files at the &lt;/span&gt;
                    &lt;span class="c1"&gt;# same time, the chunks in memory will keep &lt;/span&gt;
                    &lt;span class="c1"&gt;# increasing and will eat up the RAM&lt;/span&gt;
                    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="preventing-our-server-from-blocking"&gt;Preventing our server from blocking&lt;a class="headerlink" href="#preventing-our-server-from-blocking" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;When we &lt;code&gt;await self.flush()&lt;/code&gt;, 
Tornado writes the current data to the network socket. 
Theoretically, that means at the &lt;code&gt;await self.flush()&lt;/code&gt; statement, our coroutine should pause 
because writing to socket takes some time. This little pause should allow the ioloop to
run other handlers asynchronously. This means that our server shouldn't block.&lt;/p&gt;
&lt;p&gt;But that is not the case. &lt;code&gt;self.flush()&lt;/code&gt; is very fast for small data and thus, the 
delay is so small that our coroutine will keep running without pausing and so, it 
will block the server.&lt;/p&gt;
&lt;p&gt;You can increase the &lt;code&gt;chunk_size&lt;/code&gt; to &lt;code&gt;15 MiB&lt;/code&gt; or &lt;code&gt;20 MiB&lt;/code&gt; and it may pause the 
coroutine while it's flushing the data because the data is larger this time. 
But I've observed that there's still no guarantee of that especially if you have a 
faster computer (or more RAM?) because then delay will be small.&lt;/p&gt;
&lt;p&gt;A fool-proof way to make our code non-blocking is by putting it to sleep for a 
nanosecond just after &lt;code&gt;flush()&lt;/code&gt;. That delay should be enough for the ioloop to 
run other handlers. In fact, it doesn't have to be a nanosecond. It can be an even 
smaller value. But for this example, I'll go with a nanosecond's pause.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I asked about this issue on Tornado's mailing list and Ben Darnell 
(Tornado's maintainer) gave out some pretty good tips. You can find the 
&lt;a href="https://groups.google.com/forum/#!topic/python-tornado/vHaRvzCSnYs"&gt;thread here&lt;/a&gt;. Do read it, he also posted a code example about "metered usage"
which you can use to serve your clients fairly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DownloadHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamClosedError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;
            &lt;span class="c1"&gt;# pause the coroutine so other handlers can run&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.000000001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 1 nanosecond&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This approach is pretty effective because the speed of a connection is still far 
slower than the speed of Tornado sending data to the socket. So, pausing for a nanosecond, 
and also serving other clients at the same time, doesn't really matter much.&lt;/p&gt;
&lt;p&gt;Now that we've made the &lt;code&gt;DownloadHandler&lt;/code&gt; asynchronous, we can serve multiple clients 
in a &lt;em&gt;non-blocking&lt;/em&gt; way. Even if a few different users want to download different 
files, at the same time, our server won't block.&lt;/p&gt;
&lt;h1 id="benchmarks"&gt;Benchmarks&lt;a class="headerlink" href="#benchmarks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Tornado isn't meant for serving large data. You should, when you have the option, 
use Nginx to serve large files. The benchmarks clearly show that. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: I've tested the above code with Tornado v5.0 (yet unreleased) and the 
it is much faster than the current v4.5.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;----------------------------+------------+---------------+---------------
Server                      | 1 request  | 10 concurrent | 100 concurrent 
                            |            | requests      | requests
----------------------------+------------+---------------+---------------
Nginx (w/ sendfile)         | 0.130 sec  | 0.978 sec     | 15.790 sec
Nginx (w/o sendfile)        | 0.155 sec  | 1.472 sec     | 22.424 sec
&lt;span class="hll"&gt;Tornado 5.0 (w/o sendfile)  | 0.419 sec  | 3.782 sec     | 44.289 sec
&lt;/span&gt;&lt;span class="hll"&gt;Tornado 4.5 (w/o sendfile)  | 0.560 sec  | 5.483 sec     | 57.212 sec
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's quite apparent that Tornado can't keep up with Nginx.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What's &lt;code&gt;sendfile&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sendfile&lt;/code&gt; is a function available on Linux (and Unix) which allows copying 
file to a socket at kernel level. This is far more faster than what we're doing 
- reading the file and writing to socket. While Python supports this using 
&lt;a href="https://docs.python.org/3/library/os.html#os.sendfile"&gt;&lt;code&gt;os.sendfile&lt;/code&gt;&lt;/a&gt;, Tornado doesn't. But there's an &lt;a href="https://github.com/tornadoweb/tornado/issues/1448"&gt;issue on Github&lt;/a&gt; about 
adding this support to Tornado.&lt;/p&gt;
&lt;h1 id="some-notes-on-performance"&gt;Some notes on performance&lt;a class="headerlink" href="#some-notes-on-performance" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Nginx is so fast because it's optimized for serving files. While I don't know the 
inner workings of Nginx but I can safely say that part of the reason for its speed 
is the fact that it's written in C.&lt;/p&gt;
&lt;p&gt;On the other hand, there's still room for optimizations in Tornado, 
for example we can use &lt;code&gt;sendfile&lt;/code&gt; to write a file to socket. It should make 
Tornado a little faster. &lt;/p&gt;
&lt;p&gt;Nginx also uses some sort of caching mechanism, about which 
I don't know anything yet. But if used that on Tornado, we should see some 
performance improvement.&lt;/p&gt;
&lt;p&gt;Surely, I'll keep investigating this further, but for this article, that's it.&lt;/p&gt;</summary><category term="python"></category><category term="tornado"></category></entry><entry><title>Writing an HTTP server from scratch</title><link href="https://bhch.github.io/posts/2017/11/writing-an-http-server-from-scratch/" rel="alternate"></link><updated>2017-11-16T00:00:00+05:30</updated><author><name>bhch</name></author><id>tag:bhch.github.io,2017-11-16:posts/2017/11/writing-an-http-server-from-scratch/</id><summary type="html">&lt;h1 id="prelude"&gt;Prelude&lt;a class="headerlink" href="#prelude" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This is supposed to be an introductory article that shows you how you can write 
a simple, basic HTTP server. If you're interested in building your own HTTP server, 
or just curious about how an HTTP server works, this article is a good starting 
point for that.&lt;/p&gt;
&lt;p&gt;It goes without saying that one blog post can't be taken as a guide for building
a production level HTTP server like Nginx or Apache. Those projects are results 
of years of development with hundreds of developers involved and thousands of 
man-hours devoted.&lt;/p&gt;
&lt;p&gt;Having said that, in the end of this article I have provided a few pointers 
about how you can turn this basic server into a production level server. Read 
about it in the &lt;a href="#taking-our-server-to-the-next-level"&gt;"Taking our server to the next level"&lt;/a&gt; 
section.&lt;/p&gt;
&lt;p&gt;Let's get started, then.&lt;/p&gt;
&lt;h1 id="steps-to-create-an-http-server"&gt;Steps to create an HTTP server&lt;a class="headerlink" href="#steps-to-create-an-http-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create a TCP server.&lt;/strong&gt;&lt;br /&gt;
 HTTP is built on top of TCP (Transmission Control Protocol), so we will need to
 create a program capable of sending and receiving data through a TCP socket. 
 Knowledge about the TCP protocol is not required but familiarity with Python's 
 &lt;code&gt;socket&lt;/code&gt; library is. Go through &lt;code&gt;socket&lt;/code&gt; library's &lt;a href="https://docs.python.org/3/howto/sockets.html"&gt;docs&lt;/a&gt;, or 
 read the &lt;a href="https://pymotw.com/3/socket/"&gt;PyMOTW&lt;/a&gt; page for good examples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teach our TCP server the HTTP protocol.&lt;/strong&gt;&lt;br /&gt;
 At this point our TCP server doesn't understand HTTP. To convert it from a TCP 
 server to an HTTP server all we need to do is &lt;em&gt;teach&lt;/em&gt; it the HTTP protocol.
 You need to have some basic knowledge about the HTTP protocol, 
 for example, the structure of HTTP requests and responses. A good starting 
 point to learn about the HTTP protocol is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;Mozilla's docs on HTTP&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Viola! We have built an HTTP server.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it. That's all it takes to write an HTTP server.&lt;/p&gt;
&lt;h1 id="step-1-creating-a-tcp-server"&gt;Step 1:  Creating a TCP server&lt;a class="headerlink" href="#step-1-creating-a-tcp-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="HTTP is built on top of TCP" src="/images/tcp-socket.png" /&gt;&lt;/p&gt;
&lt;p&gt;Since HTTP works through a TCP socket, we'll start by writing a simple TCP server.
We will use Python's &lt;code&gt;socket&lt;/code&gt; library for this.&lt;/p&gt;
&lt;h2 id="12-a-simple-echo-server"&gt;1.2 A simple Echo server&lt;a class="headerlink" href="#12-a-simple-echo-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Firstly, let's create a simple version of our TCP server - an Echo server. An 
Echo server is a program that returns the data that it receives, nothing less, 
nothing more.&lt;/p&gt;
&lt;p&gt;Start by creating a file called &lt;code&gt;main.py&lt;/code&gt; for our code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# address for our server&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt; &lt;span class="c1"&gt;# port for our server&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# create a socket object&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# bind the socket object to the address and port&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# start listening for connections&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Listening at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# accept any new connection&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Connected by&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# read the data sent by the client (1024 bytes)&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# send back the data to client&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# close the connection&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read the comments in the code for explanation.&lt;/p&gt;
&lt;p&gt;To test this server, we can create a TCP client but that won't be necessary. We 
can just use our web browser.&lt;/p&gt;
&lt;p&gt;First, run the server like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python main.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, visit &lt;code&gt;127.0.0.1:8888&lt;/code&gt; from your browser. Your browser will send an HTTP request 
to our TCP server. Since our server is an Echo server, it will return the data 
that our browser sends it back to the browser. &lt;/p&gt;
&lt;p&gt;You'll see a response from our server something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;GET&lt;/span&gt; &lt;span class="nn"&gt;/&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;127.0.0.1:8888&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;keep-alive&lt;/span&gt;
&lt;span class="na"&gt;Cache-Control&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;max-age=0&lt;/span&gt;
&lt;span class="na"&gt;Upgrade-Insecure-Requests&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 &amp;lt;...long string...&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;gzip, deflate, sdch&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;en-GB,en-US;q=0.8,en;q=0.6&lt;/span&gt;
&lt;span class="na"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;__utma=889955431.966891923.1514504807.15045637810 &amp;lt;...long string...&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="13-modifying-the-echo-server"&gt;1.3 Modifying the Echo server&lt;a class="headerlink" href="#13-modifying-the-echo-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our Echo server is very primitive and not very helpful. We'll now modify it such 
that it can be used as a base for our HTTP server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8888&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Listening at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Connected by&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Handles incoming data and returns a response.&lt;/span&gt;
&lt;span class="sd"&gt;        Override this in subclass.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The modifications we've done are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We've created an &lt;code&gt;__init__&lt;/code&gt; function that takes to arguments - &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;. 
  We've set the default values for them as they were in the previous example. The 
  reason we did this is now we can bind our server to different addresses and ports
  if we so desired.&lt;/li&gt;
&lt;li&gt;We've also created a new method called &lt;code&gt;handle_request&lt;/code&gt; which will come in handy 
 when we subclass the &lt;code&gt;TCPServer&lt;/code&gt; class. You might have noticed the code inside the 
 &lt;code&gt;while&lt;/code&gt; loop has also changed. The new code sends the data to &lt;code&gt;handle_request&lt;/code&gt; method 
 which will then returns a response. Currently, te &lt;code&gt;handle_request&lt;/code&gt; method does nothing 
 but we'll create a subclass and override this method to add some actual functionality.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="step-2-teaching-the-http-protocol-to-our-tcp-server"&gt;Step 2: Teaching the HTTP protocol to our TCP server&lt;a class="headerlink" href="#step-2-teaching-the-http-protocol-to-our-tcp-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="HTTP protocol" src="/images/http-speak.png" /&gt;&lt;/p&gt;
&lt;p&gt;Instead of implementing the HTTP protocol in the &lt;code&gt;TCPServer&lt;/code&gt; class, we'll subclass it 
and implement the protocol in the subclass. Add the following code to &lt;code&gt;main.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Request received!&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you run the above program and visit &lt;code&gt;127.0.0.1:8888&lt;/code&gt; from your browser, 
you should see &lt;code&gt;Request received!&lt;/code&gt; message on the screen.&lt;/p&gt;
&lt;p&gt;Although, it's not a valid HTTP response yet. An HTTP response is made up of 
the following parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The response line (it's the first line)&lt;/li&gt;
&lt;li&gt;Response headers (optional)&lt;/li&gt;
&lt;li&gt;A blank line&lt;/li&gt;
&lt;li&gt;Response body (optional)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;Server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Tornado/4.3&lt;/span&gt;
&lt;span class="na"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Wed, 18 Oct 2017 14:19:11 GMT&lt;/span&gt;
&lt;span class="na"&gt;Content-type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html; charset=UTF-8&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;13&lt;/span&gt;

Hello, world!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a better understanding of HTTP responses, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages"&gt;read the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's make our server return a valid response this time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;HTTP/1.1 200 OK&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# response line&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# blank line&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Request received!&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# response body&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time our server will return a valid HTTP response.&lt;/p&gt;
&lt;h2 id="21-headers"&gt;2.1 Headers&lt;a class="headerlink" href="#21-headers" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our server doesn't return any headers yet. Let's return some, then.&lt;/p&gt;
&lt;p&gt;Headers contain some general information, like name of the server, or the 
content type of the response, or any other information that might be useful for 
the browser but not so much for the user.&lt;/p&gt;
&lt;p&gt;First, let's give our server a name. I'll call it &lt;code&gt;Crude Server&lt;/code&gt; because it's 
crude and raw and still at a very early stage.&lt;/p&gt;
&lt;p&gt;Second, instead of return plain text, we'll return HTML in the response. For that, 
we'll also have to send a &lt;code&gt;Content-Type&lt;/code&gt; header to let the browser know that this 
is an HTML response.&lt;/p&gt;
&lt;p&gt;Now, let's make our server return this information in headers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;HTTP/1.1 200 OK&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# response line&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Server: Crude Server&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# header&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Content-Type: text/html&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# header&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# blank line&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;lt;h1&amp;gt;Request received!&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;lt;/html&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# response body&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="22-refining-our-http-server"&gt;2.2 Refining our HTTP server&lt;a class="headerlink" href="#22-refining-our-http-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We are returning the HTTP response by manually writing it. It's not 
very convenient. &lt;/p&gt;
&lt;p&gt;Let's create a few methods to compile response line, headers and response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CrudeServer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;status_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Not Found&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Handles the incoming request.&lt;/span&gt;
&lt;span class="sd"&gt;        Compiles and returns the response&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;response_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;blank_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;h1&amp;gt;Request received!&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;blank_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;response_body&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns response line&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;reason&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_codes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HTTP/1.1 &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns headers&lt;/span&gt;
&lt;span class="sd"&gt;        The `extra_headers` can be a dict for sending &lt;/span&gt;
&lt;span class="sd"&gt;        extra headers for the current response&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;headers_copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# make a local copy of headers&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;extra_headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;headers_copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extra_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't think the above code needs any explanation. If you read it, it will be all 
clear to you.&lt;/p&gt;
&lt;h2 id="23-status-codes"&gt;2.3 Status codes&lt;a class="headerlink" href="#23-status-codes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As you can see in the code above, we've created a dictionary of status codes in 
&lt;code&gt;HTTPServer&lt;/code&gt; class. But there are only 2 status codes in our dictionary. I've done that 
intentionally to keep the code shorter. You can implement all the status codes 
in your local version of the code. See &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;Mozilla's docs&lt;/a&gt; for a list of all 
the HTTP statuses.&lt;/p&gt;
&lt;p&gt;Alternatively, you can use Python's &lt;code&gt;httplib&lt;/code&gt; from standard library. It has a dictionary 
of all HTTP statuses which can be accessed from &lt;code&gt;httplib.responses&lt;/code&gt;. Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="24-http-requests"&gt;2.4 HTTP requests&lt;a class="headerlink" href="#24-http-requests" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An HTTP request is made up of the following parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The request line (it's the first line)&lt;/li&gt;
&lt;li&gt;Request headers (optional)&lt;/li&gt;
&lt;li&gt;A blank line&lt;/li&gt;
&lt;li&gt;Request body (optional)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An example of typical HTTP request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;GET&lt;/span&gt; &lt;span class="nn"&gt;/index.html&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;example.com&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;keep-alive&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case you haven't noticed, in the example above, the request doesn't have a body, 
just a Request line, headers and a blank line at the end (although, it's not visible here).&lt;/p&gt;
&lt;p&gt;The most important part of an HTTP request is the Request line. Let's discuss this 
further below.&lt;/p&gt;
&lt;h3 id="241-request-line"&gt;2.4.1 Request line&lt;a class="headerlink" href="#241-request-line" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first line of an HTTP request is called the Request line. It consists of 4 parts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    GET    /index.html      HTTP/1.1           \r\n
    \_/    \_________/      \______/          \____/
     |          |               |                |
  Method       URI        HTTP version       Line break
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Method&lt;/code&gt; tells the server what action the client wants to perform on the &lt;code&gt;URI&lt;/code&gt;.
  For example, &lt;code&gt;GET&lt;/code&gt; method means the client wants the server to send him the page at 
  the given &lt;code&gt;URI&lt;/code&gt;. The &lt;code&gt;POST&lt;/code&gt; method means the client wants to send some data to the 
  server at the given &lt;code&gt;URI&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URI&lt;/code&gt; stands for Uniform Resource Identifier. This tells the server on which 
 resource or page or anything else the client wants to perform the request.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP version&lt;/code&gt; is the version of HTTP the client supports or wants the server to use 
 for the response. The most widely used version of HTTP is 1.1.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Line break&lt;/code&gt; - this tells the server that the request line has ended and the 
 request headers follow after this line.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've covered basics about the HTTP requests. You can read more about it &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="25-parsing-requests"&gt;2.5 Parsing requests&lt;a class="headerlink" href="#25-parsing-requests" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So far, we've rendered a response without actually &lt;em&gt;reading&lt;/em&gt; the requests, which 
means our server is no good yet. We'll have to write some more code to parse the 
incoming requests to know what HTTP method is used, to know what URI is requested, 
etc.&lt;/p&gt;
&lt;p&gt;Let's write a simple request parser. We'll create a class called &lt;code&gt;HTTPRequest&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;http_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# default to HTTP/1.1 if request doesn&amp;#39;t provide a version&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;# a dictionary for headers&lt;/span&gt;

        &lt;span class="c1"&gt;# call self.parse method to parse the request data&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;request_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_request_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_request_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;http_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code only parses the Request line. We don't have to worry about request headers, 
or request body for now.&lt;/p&gt;
&lt;h2 id="26-implementing-http-request-methods"&gt;2.6 Implementing HTTP request methods&lt;a class="headerlink" href="#26-implementing-http-request-methods" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our server can't distinguish between different request methods. We are serving 
the same response for &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;OPTIONS&lt;/code&gt; or any other request method. &lt;/p&gt;
&lt;p&gt;Let's modify our &lt;code&gt;HTTPServer&lt;/code&gt; class to identify between &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt; requests.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OPTIONS&lt;/code&gt; is the easiest method to implement, followed by &lt;code&gt;GET&lt;/code&gt;. 
We'll create two methods on &lt;code&gt;HTTPServer&lt;/code&gt; 
class - &lt;code&gt;handle_GET&lt;/code&gt; to handle &lt;code&gt;GET&lt;/code&gt; requests, and &lt;code&gt;handle_OPTIONS&lt;/code&gt; to handle &lt;code&gt;OPTIONS&lt;/code&gt; 
requests.&lt;/p&gt;
&lt;p&gt;For a &lt;code&gt;GET&lt;/code&gt; request, a server returns the requested resource. Say, if a request 
comes in like &lt;code&gt;GET /index.html&lt;/code&gt;, the server will send the contents of &lt;em&gt;index.html&lt;/em&gt; 
file in the response body.&lt;/p&gt;
&lt;p&gt;For an &lt;code&gt;OPTIONS&lt;/code&gt; request, a server returns a response that lets the client know which 
request methods this server supports. So, if a request comes in like &lt;code&gt;OPTIONS /index.html&lt;/code&gt;, 
the server sends back a response with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Allow"&gt;&lt;code&gt;Allow&lt;/code&gt;&lt;/a&gt; header like this - 
&lt;code&gt;Allow: OPTIONS, GET, POST&lt;/code&gt;. Since, we are only implementing &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt; methods, 
we'll send a header like &lt;code&gt;Allow: OPTIONS, GET&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ... other code ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# create an instance of `HTTPRequest`&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# now, look at the request method and call the &lt;/span&gt;
        &lt;span class="c1"&gt;# appropriate handler&lt;/span&gt;
        &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;handle_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_OPTIONS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;extra_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Allow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OPTIONS, GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extra_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;blank_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;blank_line&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# We&amp;#39;ll write this method a little later&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, we've created two handlers to handle &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt; requests. But you might 
have noticed those handlers don't return anything yet. We'll fix that in the next 
section, and serve the content directly from files.&lt;/p&gt;
&lt;p&gt;But before that, we can still improve our server a little bit. Suppose a &lt;code&gt;POST&lt;/code&gt; 
request comes in. But we haven't implemented the &lt;code&gt;handle_POST&lt;/code&gt;, so our server will 
crash because this line &lt;code&gt;handler = getattr(self, 'handle_%s' % request.method)&lt;/code&gt; will 
raise an &lt;code&gt;AttributeError&lt;/code&gt;, since &lt;code&gt;handle_POST&lt;/code&gt; doesn't exist. We can 
write some &lt;code&gt;try...except&lt;/code&gt; code to handle this exception. At the same time, it would 
be nice to let the client know that we don't support this requests method. HTTP 
has a status code &lt;code&gt;501 Not Implemented&lt;/code&gt; just for this purpose. A server must send 
a &lt;code&gt;501&lt;/code&gt; response if it doesn't understand the incoming request method.&lt;/p&gt;
&lt;p&gt;So, let's modify our server to send a &lt;code&gt;501&lt;/code&gt; response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Not Found&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;501&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Not Implemented&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;handle_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_501_handler&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;HTTP_501_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rquest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;501&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;blank_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;501 Not Implemented&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;blank_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;response_body&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ... other code ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, if a rquest comes in with any method other than &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt;, our server 
will appropriately return a &lt;code&gt;501&lt;/code&gt; response.&lt;/p&gt;
&lt;h2 id="27-serving-content-from-files"&gt;2.7 Serving content from files&lt;a class="headerlink" href="#27-serving-content-from-files" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let's now render some content from files instead of from strings as we're doing. &lt;/p&gt;
&lt;p&gt;First, let's create a couple of files - &lt;em&gt;"index.html"&lt;/em&gt; and &lt;em&gt;"hello.html"&lt;/em&gt;. So, if a 
request comes in like &lt;code&gt;GET /index.html&lt;/code&gt;, we'll serve the &lt;em&gt;index.html&lt;/em&gt; file. If 
a request comes in like &lt;code&gt;GET /hello.html&lt;/code&gt;, we'll serve the &lt;em&gt;hello.html&lt;/em&gt; file. &lt;/p&gt;
&lt;p&gt;Keep both these files in the same directory as `main.py.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.html&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Index page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Index page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is the index page.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;hello.html&lt;/em&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is the hello page.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let's modify our handlers to render content according to the request URI. &lt;/p&gt;
&lt;p&gt;But, suppose, a request comes in at &lt;code&gt;/something.html&lt;/code&gt;. This file doesn't exist. 
So, our server should send a &lt;code&gt;404 Not Found&lt;/code&gt; response if it can't find a file 
for the URI. So, we'll have to write code for that as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ... other code ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# remove the slash from URI&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;response_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;blank_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;blank_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;response_body&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, run the server, and visit &lt;code&gt;127.0.0.1:8888/index.html&lt;/code&gt; and you should 
see the response containing the contents of &lt;em&gt;index.html&lt;/em&gt; file. &lt;/p&gt;
&lt;p&gt;Also, try and visit a random url like &lt;code&gt;127.0.0.1:8888/blahblah.html&lt;/code&gt; and you should 
get the &lt;code&gt;404 Not Found&lt;/code&gt; response.&lt;/p&gt;
&lt;p&gt;Now, more importantly, our server should also be able to respond to &lt;code&gt;OPTIONS&lt;/code&gt; requests. 
From our browsers, we can't make an &lt;code&gt;OPTIONS&lt;/code&gt; request. But you can install extentions 
for that. Just do a Google search for &lt;code&gt;Rest client extension for &amp;lt;browser-name&amp;gt;&lt;/code&gt;. 
A REST client extension will allow you to make requests using different request methods.&lt;/p&gt;
&lt;p&gt;You can also use &lt;code&gt;curl&lt;/code&gt;, if you have that installed on your system. Example: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -X OPTIONS http://127.0.0.1:8888 -i
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Anyway, if you make an &lt;code&gt;OPTIONS&lt;/code&gt; request to the server, you should see the &lt;code&gt;Allow&lt;/code&gt; 
header in the response headers but no response body.&lt;/p&gt;
&lt;h2 id="28-serving-images-and-other-media"&gt;2.8 Serving images and other media&lt;a class="headerlink" href="#28-serving-images-and-other-media" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To serve images, or videos, or any other media a server must send a proper 
&lt;code&gt;Content-Type&lt;/code&gt; header to the browser, so that the browser can render the content 
appropriately.&lt;/p&gt;
&lt;p&gt;Our server, as it is right now, can serve images, or videos. You can even try it - 
put an image file next to the previously created HTML files and make a request for 
that image from the browser - &lt;code&gt;127.0.0.1:8888/picture.png&lt;/code&gt; and you should see some 
random gibberish text on your screen. This is happening because our server is sending 
the image with &lt;code&gt;Content-Type: text/html&lt;/code&gt; header. That is why the  browser is not rendering 
it as an image.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Content-Type&lt;/code&gt; of a file is also called &lt;a href="https://en.wikipedia.org/wiki/Media_type"&gt;MIME Type&lt;/a&gt;. We'll be using Python's 
&lt;code&gt;mimetypes&lt;/code&gt; library to know a file's MIME type from it's extension. We can do it 
manually, but there are hundreds of different file types - &lt;em&gt;"jpg, png, mp4, mp3, svg ..."&lt;/em&gt;, 
so, why not use a library to make it easier.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mimetypes&lt;/code&gt; library is included in Python's standard library, so no need to install 
anything.&lt;/p&gt;
&lt;p&gt;Let's modify our server to send proper &lt;code&gt;Content-Type&lt;/code&gt; header for different files. &lt;/p&gt;
&lt;p&gt;The highlighted lines contain the newly added code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mimetypes&lt;/span&gt;
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ... other code ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;response_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="hll"&gt;            &lt;span class="c1"&gt;# find out a file&amp;#39;s MIME type&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="c1"&gt;# if nothing is found, just send `text/html`&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mimetypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;guess_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="n"&gt;extra_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extra_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;
           &lt;span class="c1"&gt;# ... rest of the code ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, put an image next to &lt;em&gt;index.html&lt;/em&gt; and make a request for it from your browser. 
You should see the image rendered properly. You can also try and embed the image 
in &lt;em&gt;index.html&lt;/em&gt; file using &lt;code&gt;&amp;lt;img src="image-name.png"&amp;gt;&lt;/code&gt; and then request the &lt;code&gt;/index.html&lt;/code&gt;
page. You should see the image there, too.&lt;/p&gt;
&lt;h1 id="step-3-there-aint-no-step-3"&gt;Step 3: There ain't no step 3&lt;a class="headerlink" href="#step-3-there-aint-no-step-3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We've built our server! Well, at least a minimal server for learning purpose. Now you 
can just play around with it - try and implement more request methods, or more headers. &lt;/p&gt;
&lt;p&gt;Hopefully, the way HTTP and HTTP servers work is pretty obvious to you now. But 
we've only scratched the surface of the HTTP protocol and it's workings. So if you're 
really serious about making a server that's production ready, read the next section 
for some pointers.&lt;/p&gt;
&lt;h1 id="taking-our-server-to-the-next-level"&gt;Taking our server to the next level&lt;a class="headerlink" href="#taking-our-server-to-the-next-level" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Below are a few checkpoints that almost every production level server implements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Implement full HTTP&lt;/strong&gt;:&lt;br /&gt;
 Our server only supports two methods - &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt; and a few headers. It 
 has no support for Cookies, or caching. A good starting point towards a production 
 ready server would be to implement the full HTTP protocol. You can start by reading 
 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;Mozilla's web docs&lt;/a&gt; and implementing all the HTTP features one by one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serving multiple clients&lt;/strong&gt;:&lt;br /&gt;
 Currently, our server only serves one client at a time. You can make it serve 
 more than one client at a time by multi-threading. But not all servers use 
 multi-threading. There are event driven servers which use a different approach. 
 Read about the Tornado web server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WSGI support&lt;/strong&gt;:&lt;br /&gt;
 Currently, Python frameworks like Django and Flask won't work with our 
 server. The only way to make our server work with them is by implementing WSGI. 
 What is WSGI? Here's a &lt;a href="http://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/"&gt;tutorial by Armin Ronacher&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Daemon mode&lt;/strong&gt;:&lt;br /&gt;
 Running a server in daemon mode means that running it as a background process. 
 Currently, our server doesn't run in background. So, if we run it and then 
 close the terminal, our server process will also stop. You can use tools like 
 &lt;a href="http://supervisord.org/"&gt;supervisord&lt;/a&gt; to make the server run in daemon mode. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logging&lt;/strong&gt;:&lt;br /&gt;
 Logging is a very import feature of servers. It means writing logs to a file 
 in the event of say, an error occurs, like a &lt;code&gt;404&lt;/code&gt; error, or a &lt;code&gt;500&lt;/code&gt; server error. 
 Servers also write access logs for every request which contain information about the
 IP Address of the the client, the page requested and the time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configuration support&lt;/strong&gt;:&lt;br /&gt;
 Our server doesn't support configuration, for example we can't tell our server 
 which files or directories to server, where to find files, etc. This way, we can 
 map a file to a different URL, which means we can serve &lt;code&gt;hello.html&lt;/code&gt; file from a 
 URL like &lt;code&gt;/goodbye&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serving large files&lt;/strong&gt;:&lt;br /&gt;
 Our server is capable of serving videos. But not very large videos. The reason 
 is before serving files to the client we read the whole file in the memory by 
 using &lt;code&gt;f.read()&lt;/code&gt; (see the code in &lt;code&gt;handle_GET&lt;/code&gt; method above). So, if you try to 
 serve large video file, say about 3 GB, and you only have 2 GB of RAM, your server 
 will crash. The way servers safely serve large files is by reading and writing 
 only a smart part (around 10 - 20 MB) of the file at a time. This is done in a 
 loop which will run until the whole file is read and written to the response.
 This technique is called &lt;em&gt;chunking&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;:&lt;br /&gt;
 In this blog post, we've talked about almost everything HTTP related, except for 
 security. This is a very delicate topic and it's never permanent - you'll have to 
 constantly keep working to keep your code secure. A good starting point to read 
 about server security would be &lt;a href="https://wiki.mozilla.org/Security/Guidelines/Web_Security"&gt;this page by Mozilla&lt;/a&gt;. But the best way to 
 keep a software secure is by making it open source. That way if someone finds a 
 security issue, they might notify you or even write a patch themselves. Why do you 
 think almost every web server is open source? This is why.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="thats-it"&gt;That's it&lt;a class="headerlink" href="#thats-it" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I got none more fo you, brah. In case there are errors in the code, or any other 
mistakes, please let me know. &lt;/p&gt;
&lt;p&gt;Until next time.&lt;/p&gt;</summary><category term="python"></category><category term="http"></category><category term="server"></category></entry><entry><title>Making multiple async HTTP requests using Tornado</title><link href="https://bhch.github.io/posts/2017/10/making-multiple-async-http-requests-using-tornado/" rel="alternate"></link><updated>2017-10-15T00:00:00+05:30</updated><author><name>bhch</name></author><id>tag:bhch.github.io,2017-10-15:posts/2017/10/making-multiple-async-http-requests-using-tornado/</id><summary type="html">&lt;p&gt;Although I don't like using callbacks for writing async code, but to make 
multiple HTTP requests and process them asynchronously, I do.&lt;/p&gt;
&lt;p&gt;The advantage of using callbacks in this case over coroutines is that 
as soon as Tornado gets a response, it calls the callback function to handle the 
response. So, for example, if you're making 5 HTTP requests, and Tornado gets a 
response for 3rd request before other requests, it will call the callback 
function so that the response can be handled right away. You don't have to wait 
for all the requests to finish.&lt;/p&gt;
&lt;p&gt;But with coroutines, this can't be done. Since, you have to use &lt;code&gt;yield&lt;/code&gt; statement 
in a coroutine to get the result of a request future, the coroutine won't move 
forward until that request has been fetched (&lt;em&gt;i.e.&lt;/em&gt; until the future gets a result).&lt;/p&gt;
&lt;p&gt;Although, you can yield a list of futures, but then again, the coroutine won't move 
forward until all the futures in the list get resolved.&lt;/p&gt;
&lt;p&gt;Since Tornado 4.1, there's a class called &lt;a href="http://www.tornadoweb.org/en/stable/gen.html#tornado.gen.WaitIterator"&gt;&lt;code&gt;gen.WaitIterator&lt;/code&gt;&lt;/a&gt; which can be 
used to circumvent this issue. You can give it a few futures to hold and it allows 
you to yield them as any of them get resolved. This way, you don't have to wait 
for all the futures to resolve.&lt;/p&gt;
&lt;h1 id="example-using-callbacks"&gt;Example using callbacks&lt;a class="headerlink" href="#example-using-callbacks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ioloop&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.httpclient&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AsyncHTTPClient&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_urls&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Fetches urls&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;url 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;url 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;url 3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;url 4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;http_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AsyncHTTPClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fetching &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
        &lt;span class="n"&gt;http_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;handle_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Handles response&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# do something with the response&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fetch_urls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="but-how-to-stop-the-loop"&gt;But how to stop the loop?&lt;a class="headerlink" href="#but-how-to-stop-the-loop" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Although, the above solution is pretty good, but there's a catch - you'd have to 
stop the loop manually. But how would you know if you've fetched and processed 
all the urls?&lt;/p&gt;
&lt;p&gt;One solution that I can think of is you can have a global variable to store the 
number of urls to fetch, and another variable to store the number of responses 
handled. Then you can check if you've gotten the responses for all the urls by 
checking if number of responses handled is equal to number of urls to fetch. If yes,
that means all the requests have been finished and processed and now
you can stop the loop by calling &lt;code&gt;ioloop.IOLoop.current().stop()&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="example-using-coroutines"&gt;Example using coroutines&lt;a class="headerlink" href="#example-using-coroutines" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Since version 4.1, Tornado provides a [&lt;code&gt;gen.WaitIterator&lt;/code&gt;] class to which allows 
you to make all the requests at once and process them as they come, without 
having to wait for others.&lt;/p&gt;
&lt;p&gt;To use &lt;a href="http://www.tornadoweb.org/en/stable/gen.html#tornado.gen.WaitIterator"&gt;&lt;code&gt;gen.WaitIterator&lt;/code&gt;&lt;/a&gt;, you need to create an instance of it. It takes 
an arbitrary number of futures as arguments. It doesn't take a list as argument, 
but you can use &lt;code&gt;*&lt;/code&gt; to unpack the list. See the example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ioloop&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.httpclient&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AsyncHTTPClient&lt;/span&gt;

&lt;span class="nd"&gt;@gen.couroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_and_handle&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Fetches the urls and handles/processes the response&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;url 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;url 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;url 3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;url 4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;http_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AsyncHTTPClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;waiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;http_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;waiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;waiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch_and_handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The limitation of &lt;code&gt;gen.WaitIterator&lt;/code&gt; is that you can't add more futures&lt;/p&gt;
&lt;h3 id="no-need-to-worry-about-stopping-the-loop"&gt;No need to worry about stopping the loop&lt;a class="headerlink" href="#no-need-to-worry-about-stopping-the-loop" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can't run a coroutine like we run a normal function. 
To run a coroutine, we have used IOLoop's &lt;code&gt;run_sync&lt;/code&gt; method. This also 
gives us an advantage of not worrying about stopping the loop. Tornado will 
automatically stop the loop when all the requests are finished and processed.&lt;/p&gt;</summary><category term="python"></category><category term="tornado"></category></entry><entry><title>Python testing - How to mock requests during tests</title><link href="https://bhch.github.io/posts/2017/09/python-testing-how-to-mock-requests-during-tests/" rel="alternate"></link><updated>2018-01-08T00:00:00+05:30</updated><author><name>bhch</name></author><id>tag:bhch.github.io,2017-09-30:posts/2017/09/python-testing-how-to-mock-requests-during-tests/</id><summary type="html">&lt;p&gt;In the previous post, I wrote an introductory post about getting started with 
mocking tests in Python. You can find it here: 
&lt;a href="https://bhch.github.io/posts/2017/09/python-testing-introduction-to-mocking/"&gt;Python testing - Introduction to mocking&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I'll discuss how you can mock HTTP requests made using &lt;code&gt;urllib&lt;/code&gt; 
or &lt;a href="http://docs.python-requests.org/en/master/"&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;h1 id="a-simple-example"&gt;A simple example&lt;a class="headerlink" href="#a-simple-example" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This is a very simple example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;url_exists&lt;/code&gt; function takes a url and makes an HTTP request to that url. If the 
response status code is &lt;code&gt;200&lt;/code&gt;, it returns &lt;code&gt;True&lt;/code&gt;,  if status code is &lt;code&gt;404&lt;/code&gt;, it 
returns &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, we'll test if it works as expected. But instead of making actual requests to 
the url, we'll mock the requests and set the desired status codes for our mock 
object manually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tests.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="c1"&gt;# for Python &amp;gt;= 3.3 use unittest.mock&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url_exists&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FetchTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_returns_true_if_url_found&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://google.com&amp;#39;&lt;/span&gt;

            &lt;span class="c1"&gt;# set a `status_code` attribute on the mock object&lt;/span&gt;
            &lt;span class="c1"&gt;# with value 200&lt;/span&gt;
            &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_returns_false_if_url_not_found&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://google.com/nonexistingurl&amp;#39;&lt;/span&gt;

                &lt;span class="c1"&gt;# set a `status_code` attribute on the mock object&lt;/span&gt;
                &lt;span class="c1"&gt;# with value 404&lt;/span&gt;
                &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can control the returned value of a mocked object using &lt;code&gt;return_value&lt;/code&gt; 
attribute. Above, we're setting status codes on &lt;code&gt;mock_request.return_value&lt;/code&gt;, 
which means that &lt;code&gt;mock_request.return_value&lt;/code&gt; returns a &lt;em&gt;"blank"&lt;/em&gt; object which 
we can modify in any way we want, just like we've done above by setting a 
&lt;code&gt;status_code&lt;/code&gt; attribute on it. &lt;/p&gt;
&lt;p&gt;The reason we've done it is because &lt;code&gt;requests.get&lt;/code&gt; returns a &lt;em&gt;response&lt;/em&gt; object, 
if we mock it, &lt;code&gt;mock_request&lt;/code&gt; should also return a &lt;em&gt;response&lt;/em&gt; object. But, as 
mentioned above, it returns a &lt;em&gt;"blank"&lt;/em&gt; object, not an actual &lt;em&gt;response&lt;/em&gt; object. 
So, we set a &lt;code&gt;status_code&lt;/code&gt; attribute on it to mimic a &lt;em&gt;response&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If all this is confusing, you can create a separate class for a fake response. 
&lt;a href="#creating-a-dedicated-class-for-fake-response"&gt;See below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's run the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m unittest tests

&lt;span class="c1"&gt;# Output&lt;/span&gt;

..
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; in &lt;span class="m"&gt;0&lt;/span&gt;.003s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So it worked!&lt;/p&gt;
&lt;h3 id="testing-if-the-mocked-object-actually-gets-called"&gt;Testing if the mocked object actually gets called&lt;a class="headerlink" href="#testing-if-the-mocked-object-actually-gets-called" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In our tests above, we only test the return value of &lt;code&gt;url_exists&lt;/code&gt; function. 
But there's a problem with our tests. We don't know for sure if the &lt;code&gt;url_exists&lt;/code&gt; 
function calls &lt;code&gt;requests.get&lt;/code&gt; method because we've mocked it in our tests. 
We have to know for sure that &lt;code&gt;url_exists&lt;/code&gt; function really calls &lt;code&gt;requests.get&lt;/code&gt; 
method.&lt;/p&gt;
&lt;p&gt;Well, &lt;code&gt;mock&lt;/code&gt; makes it easy for us to test that. To test if &lt;code&gt;url_exits&lt;/code&gt; tries 
to call &lt;code&gt;requests.get&lt;/code&gt; once with the given &lt;code&gt;url&lt;/code&gt;, we can use &lt;code&gt;assert_called_once_with&lt;/code&gt;
attribute on the mocked object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; From our small example, it is very obvious that &lt;code&gt;url_exists&lt;/code&gt; does call 
&lt;code&gt;requests.get&lt;/code&gt; method. But in a large piece of code, with a lot of variables and 
conditional statements, things don't remain so obvious any more - you will have 
to write tests to make sure things work as expected.&lt;/p&gt;
&lt;p&gt;Let's modify our test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FetchTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_returns_true_if_url_found&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://google.com&amp;#39;&lt;/span&gt;

            &lt;span class="c1"&gt;# set a `status_code` attribute on the mock object&lt;/span&gt;
            &lt;span class="c1"&gt;# with value 200&lt;/span&gt;
            &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="hll"&gt;            &lt;span class="c1"&gt;# test if requests.get was called &lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="c1"&gt;# with the given url or not&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_returns_false_if_url_not_found&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://google.com/nonexistingurl&amp;#39;&lt;/span&gt;

                &lt;span class="c1"&gt;# set a `status_code` attribute on the mock object&lt;/span&gt;
                &lt;span class="c1"&gt;# with value 404&lt;/span&gt;
                &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;

                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="hll"&gt;                &lt;span class="c1"&gt;# test if requests.get was called &lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;                &lt;span class="c1"&gt;# with the given url or not&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;                &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run it again and it should still work.&lt;/p&gt;
&lt;h1 id="faking-the-response"&gt;Faking the response&lt;a class="headerlink" href="#faking-the-response" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;At certain times, just mocking requests isn't enough because you'd need to do some 
operations on the response. For those purposes, you can make the mocked request 
object return a &lt;em&gt;fake&lt;/em&gt; response for the purpose of testing.&lt;/p&gt;
&lt;p&gt;Let's write another function in the &lt;em&gt;main.py&lt;/em&gt; file called &lt;code&gt;process_response&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;process_response&lt;/code&gt; function just requests a url and returns the content of 
the response. It's a very simple example.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;mock&lt;/code&gt; allows you to set attributes on the mocked object on-the-fly while 
testing, setting a fake response is pretty straight forward. We can even create 
attributes of attributes. So, to mock the content, we'll need to set a &lt;code&gt;content&lt;/code&gt; 
attribute on the the &lt;code&gt;return_value&lt;/code&gt; of the &lt;code&gt;mock_request&lt;/code&gt;, something like - 
&lt;code&gt;mock_request.return_value.content = "Fake content"&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;It's very convenient that we can create attributes of attributes like this. In a 
general Python class, you'll first need to create an attribute before you can 
create it's sub-attribute.&lt;/p&gt;
&lt;p&gt;Let's test our code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tests.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;process_response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProcessResponseTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_response_content_is_not_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://google.com&amp;#39;&lt;/span&gt;

            &lt;span class="c1"&gt;# set fake content&lt;/span&gt;
            &lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fake content&amp;quot;&lt;/span&gt;

            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertNotNone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run the tests again and they should all pass.&lt;/p&gt;
&lt;h1 id="creating-a-dedicated-class-for-fake-response"&gt;Creating a dedicated class for fake response&lt;a class="headerlink" href="#creating-a-dedicated-class-for-fake-response" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this post, I've used &lt;code&gt;mock_request.return_value&lt;/code&gt; to set status code, content, 
etc on the &lt;em&gt;fake&lt;/em&gt; response. This can get repetitive and there's a better way to 
deal with fake responses.&lt;/p&gt;
&lt;p&gt;You can create a separate class for the fake response where you'd set default values 
for the response. That should reduce some of the repetitive code. It would work like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FakeResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# default response attributes&lt;/span&gt;
    &lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Some content&amp;quot;&lt;/span&gt;


&lt;span class="c1"&gt;# then use it like this:&lt;/span&gt;
&lt;span class="n"&gt;fake_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FakeResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;mock_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fake_response&lt;/span&gt;

&lt;span class="c1"&gt;# change the default values if you want&lt;/span&gt;
&lt;span class="n"&gt;fake_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
&lt;span class="n"&gt;fake_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this post we saw how we can mock HTTP requests by mocking &lt;code&gt;requests.get&lt;/code&gt; or 
(&lt;code&gt;urllib.urlopen&lt;/code&gt;). We also saw that we can mock  &lt;code&gt;requests.get&lt;/code&gt; directly or we 
can mock the funciton/code that calls &lt;code&gt;requests.get&lt;/code&gt;. Both the ways work, so it 
doesn't matter which way we choose.&lt;/p&gt;</summary><category term="python"></category><category term="mock"></category><category term="unittest"></category><category term="requests"></category><category term="urllib"></category></entry><entry><title>Python testing - Introduction to mocking</title><link href="https://bhch.github.io/posts/2017/09/python-testing-introduction-to-mocking/" rel="alternate"></link><updated>2017-09-10T00:00:00+05:30</updated><author><name>bhch</name></author><id>tag:bhch.github.io,2017-09-10:posts/2017/09/python-testing-introduction-to-mocking/</id><summary type="html">&lt;h1 id="what-is-mocking"&gt;What is mocking?&lt;a class="headerlink" href="#what-is-mocking" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Let me try and explain what mocking is and when you need it, with an example &amp;mdash;&lt;/p&gt;
&lt;p&gt;Suppose you have a web app where users can sign up. When a user signs up, 
your app automatically sends them an email asking them to verify their email 
address. The workflow would look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User sees the page&lt;/li&gt;
&lt;li&gt;User submits the sign up form&lt;/li&gt;
&lt;li&gt;Check if credentials are valid&lt;/li&gt;
&lt;li&gt;Create the user if valid OR show error if invalid&lt;/li&gt;
&lt;li&gt;Send email if user is created&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, your app probably has a few functions (or classes) for doing specific tasks 
such as &lt;em&gt;validating&lt;/em&gt;, &lt;em&gt;saving to database&lt;/em&gt;, &lt;em&gt;sending email&lt;/em&gt;, and a main &lt;em&gt;sign up&lt;/em&gt;
function to render the form. etc. &lt;/p&gt;
&lt;p&gt;Let's say the function that handles sign ups, and the function that sends email 
look roughly like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sign_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The sign up function, called when a user submits form&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# check if user credentials are valid&lt;/span&gt;

    &lt;span class="c1"&gt;# save user&lt;/span&gt;

    &lt;span class="c1"&gt;# send email&lt;/span&gt;
    &lt;span class="n"&gt;send_verification_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_verification_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# compose a mail and send&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Say you want to test the &lt;code&gt;sign_up&lt;/code&gt; function to see if the sign up workflow behaves
as expected, but you don't want to trigger sending emails. You might be creating 
users many times during the tests. So, sending emails every time can be 
a bad idea because it can slow down your tests. Or if the mail server returns 
any error, your tests would fail (of course, you can handle those errors, but 
for the sake of this example, bear with me).&lt;/p&gt;
&lt;p&gt;Since, the &lt;code&gt;sign_up&lt;/code&gt; function calls the &lt;code&gt;send_verification_mail&lt;/code&gt; function 
from within, it's guaranteed that if you test &lt;code&gt;sign_up&lt;/code&gt; function, 
you will trigger sending email.&lt;/p&gt;
&lt;p&gt;This gives rise to the question: How can I test &lt;code&gt;sign_up&lt;/code&gt; function without 
calling &lt;code&gt;send_verification_mail&lt;/code&gt; function? &lt;/p&gt;
&lt;p&gt;This is where mocking comes in. Mocking means you can create a &lt;em&gt;fake&lt;/em&gt; function 
to replace &lt;code&gt;send_verifiation_mail&lt;/code&gt; in your tests. That's it.&lt;/p&gt;
&lt;h1 id="a-simple-example"&gt;A Simple example&lt;a class="headerlink" href="#a-simple-example" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you're using Python 2.7 or any version &amp;lt; 3.3, you'll need to install the 
&lt;code&gt;mock&lt;/code&gt; package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install mock
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For Python &amp;gt;= 3.3, the &lt;code&gt;mock&lt;/code&gt; is included in the standard library and 
can be imported as &lt;code&gt;unittest.mock&lt;/code&gt;. &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;First create a file called &lt;code&gt;main.py&lt;/code&gt;. Our code will live in this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;long_process&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# to emulate a long running &lt;/span&gt;
    &lt;span class="c1"&gt;# process, we&amp;#39;ll use time.sleep&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_long_process&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;long_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;main.py&lt;/code&gt;, we have a function called &lt;code&gt;long_process()&lt;/code&gt; which sleeps for &lt;code&gt;5&lt;/code&gt; seconds 
and returns &lt;code&gt;True&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;There's another function in &lt;code&gt;main.py&lt;/code&gt; called &lt;code&gt;call_long_process()&lt;/code&gt;. It just calls 
the &lt;code&gt;long_process_function()&lt;/code&gt; and returns &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, let's write some tests for the above code in a file called &lt;code&gt;tests.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tests.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="c1"&gt;# for Python &amp;gt;= 3.3 use unittest.mock&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;long_process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;call_long_process&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Tests for `long_process`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_long_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# test if `long_process` returns true&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;long_process&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_call_long_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# test if `call_long_process`&lt;/span&gt;
        &lt;span class="c1"&gt;# actually calls `long_process`&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_long_process&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;tests.py&lt;/code&gt;, we are testing that &lt;code&gt;long_process()&lt;/code&gt; function works correctly and 
it should return &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We're also testing that &lt;code&gt;call_long_process()&lt;/code&gt; function calls the &lt;code&gt;long_process()&lt;/code&gt;
function.&lt;/p&gt;
&lt;p&gt;Run the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m unittest tests

&lt;span class="c1"&gt;# Output&lt;/span&gt;

..
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; in &lt;span class="m"&gt;10&lt;/span&gt;.004s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our test passed but it took a long time. In our tests, the &lt;code&gt;long_process()&lt;/code&gt; function 
is being called twice - once in &lt;code&gt;test_long_process&lt;/code&gt; and again in &lt;code&gt;test_call_long_process&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the second test, we only want to test if &lt;code&gt;call_long_process()&lt;/code&gt; actually calls 
&lt;code&gt;long_process()&lt;/code&gt;. We don't care it &lt;code&gt;long_process()&lt;/code&gt; works properly or not, because 
we have tested that in the first test. So, there's no point in waiting 5 more seconds 
for the process to finish.&lt;/p&gt;
&lt;p&gt;Let's patch the &lt;code&gt;long_process()&lt;/code&gt; function in our second test.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tests.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="c1"&gt;# same code as above ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_call_long_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main.long_process&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_process&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="c1"&gt;# test the return value of `call_long_process` &lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_long_process&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

            &lt;span class="c1"&gt;# test if `call_long_process`&lt;/span&gt;
            &lt;span class="c1"&gt;# issues a call to `long_process`&lt;/span&gt;
            &lt;span class="n"&gt;mock_process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Above, we've patched the &lt;code&gt;long_process()&lt;/code&gt; function in the second test. We've called 
the mock object &lt;code&gt;mock_process&lt;/code&gt;. We test that the return value of &lt;code&gt;call_long_process()&lt;/code&gt; 
is &lt;code&gt;True&lt;/code&gt;, and we also test that it actually calls &lt;code&gt;long_process()&lt;/code&gt;. But since, 
we've created a mock object for it, we have to test if &lt;code&gt;mock_process&lt;/code&gt; is called or 
not. That would tell us if &lt;code&gt;call_long_process()&lt;/code&gt; issued a call, or not.&lt;/p&gt;
&lt;p&gt;Let's run our tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m unittest tests

&lt;span class="c1"&gt;# Output&lt;/span&gt;

..
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; in &lt;span class="m"&gt;5&lt;/span&gt;.003s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It worked! This time it took only 5 seconds to run all the tests. This means that 
the &lt;code&gt;long_process()&lt;/code&gt; was actually called only once. &lt;/p&gt;
&lt;p&gt;To execute our tests even faster, we can keep the tests for &lt;code&gt;long_process()&lt;/code&gt; in a 
separate file and run them only when we have to. &lt;/p&gt;
&lt;h1 id="thats-it"&gt;That's it&lt;a class="headerlink" href="#thats-it" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this post, I covered what mocking is and when you need it. I've also shown a 
very basic example of getting started with mocking.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://bhch.github.io/posts/2017/09/python-testing-how-to-mock-requests-during-tests/"&gt;next post&lt;/a&gt;, I'll write about how you can mock HTTP requests made using the 
&lt;code&gt;requests&lt;/code&gt; library.&lt;/p&gt;</summary><category term="python"></category><category term="mock"></category><category term="unittest"></category></entry><entry><title>How to integrate haystack search with Django admin</title><link href="https://bhch.github.io/posts/2017/08/how-to-integrate-haystack-search-with-django-admin/" rel="alternate"></link><updated>2017-08-28T00:00:00+05:30</updated><author><name>bhch</name></author><id>tag:bhch.github.io,2017-08-28:posts/2017/08/how-to-integrate-haystack-search-with-django-admin/</id><summary type="html">&lt;p&gt;Recently, I had to integrate Haystack with Django admin so as to be able to 
perform a full text search just via the admin. Looking around for resources on the 
internet, I came across &lt;a href="http://django-haystack.readthedocs.io/en/v2.4.1/admin.html"&gt;this page&lt;/a&gt; in Haystack's docs. Turns out Haystack 
has provided a solution to ease the integration of Haystack with Django admin.&lt;/p&gt;
&lt;p&gt;Well, sort of. You see, the solution they've provided in the docs is only partial.
You can do exactly what the docs instruct, yet the example won't work. &lt;/p&gt;
&lt;p&gt;The solution is to set the &lt;a href="https://docs.djangoproject.com/en/1.11/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields"&gt;&lt;code&gt;search_fields&lt;/code&gt;&lt;/a&gt; attribute in your admin class. 
The value of &lt;code&gt;search_fields&lt;/code&gt; can be set to any field that is present in your model.
Haystack's &lt;code&gt;SearchModelAdmin&lt;/code&gt; class will override it and will search your 
search index's &lt;code&gt;text&lt;/code&gt; field. &lt;/p&gt;
&lt;p&gt;Below is an example that would provide a little more illustration to the solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# we want to search this field&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-pub_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# show newest articles first&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm not gonna show how to set up Haystack search index. This post is not about that. 
Hopefully, you've already done that. If not, you can read Haystack's &lt;a href="http://django-haystack.readthedocs.io/en/v2.4.1/tutorial.html#handling-data"&gt;docs&lt;/a&gt; about 
that.&lt;/p&gt;
&lt;p&gt;Let's see the admin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# admin.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;haystack.admin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchModelAdmin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SearchModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# set the search_fields attribute to a field present in Article&lt;/span&gt;
    &lt;span class="n"&gt;search_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="c1"&gt;# or (&amp;#39;body&amp;#39;,) it doesn&amp;#39;t really matter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have inherited our admin class from &lt;code&gt;SearchModelAdmin&lt;/code&gt; class provided 
by Haystack. This will take the search query argument, search the index, then 
return the results.&lt;/p&gt;
&lt;p&gt;That's it! Try searching for something in Django admin, it should be working 
(if it's not, have you updated or created a search index yet?).&lt;/p&gt;
&lt;h3 id="heads-up"&gt;Heads up&lt;a class="headerlink" href="#heads-up" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are two downsides of integrating Haystack search with Django admin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; The checkboxes on the left of the changelist page table will not appear in the
search results. I don't find this a big issue, though. If a find a solution to 
this, I will post it here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; The search results will not be ordered as expected. For example, we've 
ordered the Articles by &lt;code&gt;pub_date&lt;/code&gt; in reverse order so that newest articles 
appear first. But this ordering won't apply to haystack's search results. 
They will appear, in this case, as oldest first. &lt;/p&gt;
&lt;p&gt;There's a workaround for that. You might not like it. I don't like. Having said 
that, I used that workaround for the project since I was on a deadline. And now 
I'm too lazy to look for another solutions. Anyways, here it is:&lt;/p&gt;
&lt;p&gt;Firstly, make sure that you've included the model field in your haystack search index 
class that you want to use for ordering. So in this case, that field is &lt;code&gt;pub_date&lt;/code&gt;. 
What I mean is, &lt;strong&gt;you have to included &lt;code&gt;pub_date&lt;/code&gt; in your search index&lt;/strong&gt; if you want 
to use it for ordering. Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Indexable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pub_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now copy the &lt;code&gt;haystack/admin.py&lt;/code&gt; file to your project or app's directory. Save it 
as &lt;code&gt;search_admin.py&lt;/code&gt;. Open it in a text editor. You'll see a class defined as 
&lt;code&gt;SearchChangeList&lt;/code&gt;. You'll have to change a line inside it. Find the following 
line in that class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuerySet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;haystack_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SEARCH_VAR&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, all you have to do is append &lt;code&gt;.order_by('field_name')&lt;/code&gt; to that line. In this case, 
&lt;code&gt;.order_by('-pub_date')&lt;/code&gt; (&lt;strong&gt;"&lt;code&gt;-&lt;/code&gt;"&lt;/strong&gt; means reverse ordering). Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuerySet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;haystack_connection&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SEARCH_VAR&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-pub-date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, in your &lt;code&gt;admin.py&lt;/code&gt; file, you've to import the &lt;code&gt;SearchModelAdmin&lt;/code&gt; from this file, 
instead of from &lt;code&gt;haystack.admin&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;haystack.admin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchModelAdmin&lt;/span&gt; &lt;span class="c1"&gt;# Replace this&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;search_admin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchModelAdmin&lt;/span&gt; &lt;span class="c1"&gt;# with this&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I know, this workaround is really ugly. The more preferable way would be to 
override the code, instead of copying  and changing it. Believe me, I tried that. 
But if you go through the source code in &lt;code&gt;haystack/admin.py&lt;/code&gt; file, you'll see 
overriding is not possible. Well, it is possible, but, it would still be ugly. 
Just go through the code, you'll see. If you have a better workaround, I'd love to know. &lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="haystack"></category></entry><entry><title>Understanding Tornado fundamentals</title><link href="https://bhch.github.io/posts/2017/06/understanding-tornado-fundamentals/" rel="alternate"></link><updated>2017-09-30T00:00:00+05:30</updated><author><name>bhch</name></author><id>tag:bhch.github.io,2017-06-23:posts/2017/06/understanding-tornado-fundamentals/</id><summary type="html">&lt;p&gt;Tornado's documentation is very feeble, or at least I found it so. It doesn't 
explain certain things in depth. Being new to async programming model, I found many things 
quite difficult to understand. The documentation also lacks a good tutorial, like 
the Django's documnetation has an excellent Polls tutorial which explains almost 
everything that one needs to get started with Django.&lt;/p&gt;
&lt;p&gt;I feel I should share what I learned in the hope that it might help somebody. 
These are the things I think if were present in the documentation, would have 
made my life much easier.&lt;/p&gt;
&lt;h1 id="can-tornado-make-blocking-code-non-blocking"&gt;Can Tornado make blocking code non-blocking?&lt;a class="headerlink" href="#can-tornado-make-blocking-code-non-blocking" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;No, it can't. Tornado isn't magic. For example, you can't use &lt;code&gt;time.sleep&lt;/code&gt; in your 
Tornado app and expect that Tornado will pause the code execution for one particular 
client while serving other clients. Tornado is a single threaded server. And 
&lt;code&gt;time.sleep&lt;/code&gt; blocks the thread. So, if you use &lt;code&gt;time.sleep&lt;/code&gt;, for example, to simulate 
a slow network connection (or a database query), the whole server will block.&lt;/p&gt;
&lt;p&gt;Consider this code: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlockingHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NonBlockingHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code is pretty obvious: &lt;code&gt;BlockingHandler&lt;/code&gt; will wait 10 seconds before returning 
a response. &lt;code&gt;NonBlockingHandler&lt;/code&gt; will return the response as soon as it gets a request.&lt;/p&gt;
&lt;p&gt;So, you might think that if you make a request to &lt;code&gt;BlockingHandler&lt;/code&gt; and then make 
another request to &lt;code&gt;NonBlockingHandler&lt;/code&gt;, you'll get a response from &lt;code&gt;NonBlockingHander&lt;/code&gt; 
first and then 10 seconds later, you'll get a response from &lt;code&gt;BlockingHandler&lt;/code&gt;. 
&lt;strong&gt;But that's not the case.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Try it yourself: make a request to &lt;code&gt;BlockingHandler&lt;/code&gt; from your browser. Then open a new tab
and make a request to &lt;code&gt;NonBlockingHandler&lt;/code&gt;. You'll notice that even though the 
&lt;code&gt;NonBlockingHandler&lt;/code&gt; doesn't block anywhere, you're not getting a response for it.&lt;/p&gt;
&lt;p&gt;But as soon as the 10 seconds pass, you'll get the response for both &lt;code&gt;BlockingHandler&lt;/code&gt; 
and &lt;code&gt;NonBlockingHandler&lt;/code&gt;. This is happening because the &lt;code&gt;BlockingHandler&lt;/code&gt; blocks 
the event loop. Therefore, Tornado can't accept other requests as long as this 
handler is running. That is why you won't get a response for &lt;code&gt;NonBlockingHandler&lt;/code&gt; 
if &lt;code&gt;BlockingHandler&lt;/code&gt; is already running.&lt;/p&gt;
&lt;p&gt;This is what will happen if you try to query a database synchronously. It will 
block the server &lt;strong&gt;for all the clients&lt;/strong&gt; and &lt;strong&gt;all the handlers&lt;/strong&gt; until the query finishes.&lt;/p&gt;
&lt;h1 id="how-coroutines-make-writing-async-code-easier-than-callbacks"&gt;How coroutines make writing async code easier than callbacks?&lt;a class="headerlink" href="#how-coroutines-make-writing-async-code-easier-than-callbacks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;With callbacks, you need to write &lt;em&gt;extra&lt;/em&gt; code that you won't even require if 
you use coroutines. Thus, code becomes shorter and more readable. Other than that, 
coroutines won't automatically make your code async. Again, they just make the 
code shorter and easier to maintain and debug. In smaller projects, this might not 
seem a big advantage, but in bigger projects, it's a godsend.&lt;/p&gt;
&lt;p&gt;Let's say we want do the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dowload a page asynchronously from a given url&lt;/li&gt;
&lt;li&gt;Do some processing on the downloaded page&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, let's see the code using callbacks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.httpclient&lt;/span&gt; &lt;span class="nn"&gt;AsyncHttpClient&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_url&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;http_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AsyncHttpClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;http_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;process_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something with result&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see we can't process the result in the &lt;code&gt;fetch_url&lt;/code&gt; function (sure, you can
move the &lt;code&gt;process_result&lt;/code&gt; function inside &lt;code&gt;fetch_url&lt;/code&gt; but still it's a different 
function). You need to create a separate function to process the result. A separate 
function is required which will be called when the page downloads.&lt;/p&gt;
&lt;p&gt;Now let's do the same thing using coroutines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.http&lt;/span&gt; &lt;span class="nn"&gt;client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AsyncHttpClient&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;

&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_url_and_process_result&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;http_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AsyncHttpClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;http_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# do something with the result&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code is shorter and much straight forward. The way it works is that the coroutine 
pauses every time it sees the &lt;code&gt;yield&lt;/code&gt; statement. Then you need to call the coroutine's
&lt;code&gt;next()&lt;/code&gt; method to execute the &lt;code&gt;yield&lt;/code&gt; statement and the code after that. So, when 
the page downloads, Tornado will call the &lt;code&gt;next()&lt;/code&gt; on &lt;code&gt;fetch_url_and_process_result&lt;/code&gt;
and it will execute the &lt;code&gt;yield&lt;/code&gt; statement and the code after that. So, all the 
processing can be done below the &lt;code&gt;yield&lt;/code&gt; statement. No need for a separate function.
More is explained below in the &lt;code&gt;gen.coroutine&lt;/code&gt; section.&lt;/p&gt;
&lt;p&gt;This example is a very simple use case. Consider this: let's say you need to do 
many different operations on the result. If you're using callbacks, you'll need 
to create as many functions as many time you need to process the result.&lt;/p&gt;
&lt;p&gt;But with coroutines, you can do all the operations in one single function (coroutine).&lt;/p&gt;
&lt;h1 id="what-are-futures"&gt;What are Futures?&lt;a class="headerlink" href="#what-are-futures" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A Future is a &lt;em&gt;promise&lt;/em&gt; to return the result when it's available. For example, 
if you request a web page using Tornado's &lt;code&gt;httpclient.AsyncHttpClient&lt;/code&gt;, it will 
return a &lt;em&gt;Future&lt;/em&gt; - an instance of Tornado's &lt;code&gt;Future&lt;/code&gt; class - while it waits for 
the web page to load. As soon as the web page is loaded, Tornado will set the 
result on the &lt;code&gt;Future&lt;/code&gt; instance. Then, if you yield the Future object, you will 
get the result. &lt;/p&gt;
&lt;p&gt;For the most part, you don't need to worry about Futures. But sometimes, you 
might need to return a Future manually from functions/coroutines. But that's a 
somewhat advanced usage. &lt;a href="https://github.com/tornadoweb/tornado/blob/master/demos/chat/chatdemo.py#L38-L54"&gt;This example code&lt;/a&gt; from Tornado's
GitHub repo might be helpful for that. &lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id="summary"&gt;Summary:&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;Yielding a Future returns it's result&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id="how-gencoroutine-works"&gt;How &lt;code&gt;gen.coroutine&lt;/code&gt; works?&lt;a class="headerlink" href="#how-gencoroutine-works" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;gen.coroutine&lt;/code&gt; is a decorator that you can use with your functions or coroutines 
to avoid callback based programming. But its real use case is if you're calling a 
function/coroutine that returns a Future, you should decorate the caller with 
&lt;code&gt;gen.coroutine&lt;/code&gt; to make things work as expected.&lt;/p&gt;
&lt;p&gt;See the code below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_future&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This returns a Future object&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_result&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return_future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;
    &lt;span class="c1"&gt;# do something with the result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Code explanation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;process_result&lt;/code&gt; is a generator and we've decorated it will &lt;code&gt;gen.coroutine&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gen.coroutine&lt;/code&gt; automatically calls &lt;code&gt;process_result&lt;/code&gt;'s &lt;code&gt;next()&lt;/code&gt;method to start 
  the generator.&lt;/li&gt;
&lt;li&gt;Then it puts this &lt;code&gt;process_result&lt;/code&gt; coroutine to a &lt;em&gt;"waiting list"&lt;/em&gt; until 
 &lt;code&gt;future&lt;/code&gt; has a result. There might be some other code that's
  responsible for setting the result on the &lt;code&gt;future&lt;/code&gt;, I've not shown that code. 
  So, no need to dwell into that. &lt;/li&gt;
&lt;li&gt;When the result is set on the &lt;code&gt;future&lt;/code&gt;, it calls the &lt;code&gt;next()&lt;/code&gt; method of 
 &lt;code&gt;process_result&lt;/code&gt; again which executes the &lt;code&gt;result = yield future&lt;/code&gt; statement and 
 sets &lt;code&gt;result&lt;/code&gt; variable to &lt;code&gt;future&lt;/code&gt;'s result.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you don't decorate the &lt;code&gt;process_result&lt;/code&gt; with &lt;code&gt;gen.coroutine&lt;/code&gt; you will need to 
use callbacks and the code becomes a mess. Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_future&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;process_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# do something with the result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="gencoroutine-decorated-functions-will-return-a-future-automatically"&gt;&lt;code&gt;gen.coroutine&lt;/code&gt; decorated functions will return a Future automatically&lt;a class="headerlink" href="#gencoroutine-decorated-functions-will-return-a-future-automatically" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you decorate a function/coroutine using &lt;code&gt;gen.coroutine&lt;/code&gt;, a Future object 
will be returned automatically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c1"&gt;# return nothing&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# OUTPUTS:  tornado.concurrent.Future&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See? Even if you don't return anything, &lt;code&gt;gen.coroutine&lt;/code&gt; will return a Future.&lt;/p&gt;
&lt;p&gt;So, if you return a Future from a decorated function, &lt;code&gt;gen.coroutine&lt;/code&gt; will 
wrap that Future object inside another Future object, which is not what you want.
Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="c1"&gt;# never return a future from a gen.coroutine decorated function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In above code, you're returning a Future object, but that is not what you'll get. 
You'll get this instead - &lt;code&gt;Future(f)&lt;/code&gt; - a Future within a Future. Because of this,
you'll have to &lt;code&gt;yield&lt;/code&gt; twice to get the result. If you're returning a Future 
manually, you don't need to decorate the function.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id="important"&gt;Important:&lt;a class="headerlink" href="#important" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;If you're returning a Future manually, you don't need to decorate the function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="calling-a-gencoroutine-decorated-function"&gt;Calling a &lt;code&gt;gen.coroutine&lt;/code&gt; decorated function&lt;a class="headerlink" href="#calling-a-gencoroutine-decorated-function" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you're calling a &lt;code&gt;gen.coroutine&lt;/code&gt; decorated function/coroutine, you must decorate 
the caller with &lt;code&gt;gen.coroutine&lt;/code&gt; too. And you must use the &lt;code&gt;yield&lt;/code&gt; keyword in the caller.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_nothing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;do_nothing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It makes perfect sense to use &lt;code&gt;yield&lt;/code&gt; keyword in the caller (above, &lt;code&gt;do_something&lt;/code&gt;)
because &lt;code&gt;gen.coroutine&lt;/code&gt; will return a Future. And to get it's result, you need to 
yield it. &lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id="summary_1"&gt;Summary:&lt;a class="headerlink" href="#summary_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gen.coroutine&lt;/code&gt; decorated functions will automatically retrurn a Future&lt;/li&gt;
&lt;li&gt;You don't need to use callbacks if you're using coroutines&lt;/li&gt;
&lt;li&gt;If a function/coroutine is calling another coroutine decorated with &lt;code&gt;gen.coroutine&lt;/code&gt;,
it must also be decorated with &lt;code&gt;gen.coroutine&lt;/code&gt; and must use the &lt;code&gt;yield&lt;/code&gt; keyword&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id="what-is-webasynchronous-and-when-to-use-it"&gt;What is &lt;code&gt;web.asynchronous&lt;/code&gt; and when to use it?&lt;a class="headerlink" href="#what-is-webasynchronous-and-when-to-use-it" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This decorator is meant to be used on methods of Tornado's &lt;code&gt;web.RequestHandler&lt;/code&gt;, namely: &lt;code&gt;get&lt;/code&gt;, 
&lt;code&gt;post&lt;/code&gt; etc. &lt;/p&gt;
&lt;p&gt;Since all Tornado handlers are &lt;strong&gt;synchronous&lt;/strong&gt;, you can't perform any async 
operations inside them. What that means is as soon as the method ends or returns, 
the request is considered finished.&lt;/p&gt;
&lt;p&gt;Look at the following code example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AsyncHttpClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something with response ...&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code aims to do the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Asynchronously fetch "example.com" from &lt;code&gt;get&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;Keep the client waiting unless url is fetched&lt;/li&gt;
&lt;li&gt;When url is fetched, call &lt;code&gt;on_response&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;Perform some operations on the response (fetched url)&lt;/li&gt;
&lt;li&gt;Return the response to the client&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But this won't work. Because &lt;code&gt;get&lt;/code&gt; is synchronous by default, as soon as this method 
ends, the request is considered finished. Tornado won't keep the client in the waiting 
list while the url is fetched. It will just return an empty response.&lt;/p&gt;
&lt;p&gt;This is where the &lt;code&gt;web.asynchronous&lt;/code&gt; decorator comes in. You decorate the &lt;code&gt;get&lt;/code&gt; method 
with this decorator and Tornado won't terminate the request when &lt;code&gt;get&lt;/code&gt; method exists.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@web.asynchronous&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AsyncHttpClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something with response ...&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The updated code will work as expected. One thing to note here is the last line -
&lt;code&gt;self.finish()&lt;/code&gt;. It means you are telling Tornado to terminate the request. If 
you don't write this line, Tornado will keep the request open. You only need to 
use &lt;code&gt;self.finish()&lt;/code&gt; when you're using &lt;code&gt;web.asynchronous&lt;/code&gt; decorator.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id="summary_2"&gt;Summary:&lt;a class="headerlink" href="#summary_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;web.asynchronous&lt;/code&gt; is used with handler methods (eg. &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;li&gt;It's used to make handler methods wait and not terminate the request on exit&lt;/li&gt;
&lt;li&gt;You need to manually terminate the request using &lt;code&gt;self.finish()&lt;/code&gt; when using 
this decorator&lt;/li&gt;
&lt;li&gt;This is useful when using callbacks&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id="thats-it"&gt;That's it&lt;a class="headerlink" href="#thats-it" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The things that I've written about in this post were the only things that I found 
most confusing. The other features of Tornado are straight-forward and 
documentation covers them nicely.&lt;/p&gt;
&lt;p&gt;Until next time.&lt;/p&gt;</summary><category term="python"></category><category term="tornado"></category><category term="async"></category></entry><entry><title>Fix the pip error: Couldn't find a version that satisfies the requirement</title><link href="https://bhch.github.io/posts/2017/04/fix-the-pip-error-couldnt-find-a-version-that-satisfies-the-requirement/" rel="alternate"></link><updated>2018-05-27T00:00:00+05:30</updated><author><name>bhch</name></author><id>tag:bhch.github.io,2017-04-13:posts/2017/04/fix-the-pip-error-couldnt-find-a-version-that-satisfies-the-requirement/</id><summary type="html">&lt;p&gt;Sometimes you get an error when you're trying to install a Python package 
using pip. It looks like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Could not find a version that satisfies the requirement &lt;package-name&gt; (from versions:)
No matching distribution found for &lt;package-name&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most probable reasons for this error are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;because PyPI server isn't responding to 
your requests because it has blacklisted your IP address.&lt;br /&gt;
This can be fixed by using a proxy with pip. See &lt;a href="#solution"&gt;the solution&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or because you're running an older pip (especially on Mac).&lt;br /&gt;
This can be fixed by upgrading your pip. 
See &lt;a href="https://stackoverflow.com/questions/49748063/pip-install-fails-for-every-package-could-not-find-a-version-that-satisfies/49748494#49748494"&gt;this post on Stack Overflow&lt;/a&gt;.&lt;br /&gt;
&lt;em&gt;Thanks to Anupam Jain who pointed this in the comments&lt;/em&gt;.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This might also happen because the PyPI server is down. So, in that case there's
nothing that can be done.&lt;/p&gt;
&lt;h1 id="solution"&gt;Solution&lt;a class="headerlink" href="#solution" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I had this issue because &lt;a href="https://python.org"&gt;https://python.org&lt;/a&gt; had blacklisted the IP 
of my hosting provider, the obvious solution was to make &lt;code&gt;pip&lt;/code&gt; install via a proxy.&lt;/p&gt;
&lt;p&gt;But to see if that's also the case with you, you can test it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl https://pypi.python.org

The requestors Network has been blacklisted due to excessive request volume. 
If you are a hosting customer, please contact your hosting company&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s support. 
If you are the hosting company, please contact infrastructure-staff@python.org to resolve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you see the message similar to above, that means your IP has also been 
blacklisted by &lt;a href="https://python.org"&gt;https://python.org&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;If you don't see this message then the reason for the pip error could be that you're using
an older version. See &lt;a href="https://stackoverflow.com/questions/49748063/pip-install-fails-for-every-package-could-not-find-a-version-that-satisfies/49748494#49748494"&gt;this post on Stack Overflow&lt;/a&gt; 
for a solution.&lt;/p&gt;
&lt;p&gt;Anyways, this can be fixed by using a proxy with pip.&lt;/p&gt;
&lt;p&gt;Supplying a proxy address to &lt;code&gt;pip&lt;/code&gt; is easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt --proxy address:port
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Above, &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; are IP address and port of the proxy.&lt;/p&gt;
&lt;p&gt;To find proxies, just &lt;a href="https://www.google.com/search?q=proxy+list"&gt;search Google for proxy list&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="other-things-that-i-tried"&gt;Other things that I tried&lt;a class="headerlink" href="#other-things-that-i-tried" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;These are some other things that I tried to get rid of this issue. 
Altough they didn't work for me, but they might work for you.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Changing DNS resolver of my server.&lt;/strong&gt;&lt;br /&gt;
 This makes sense if your server's DNS resolver can't find PyPI servers. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reconfiguring SSL, reinstalling CA certificates.&lt;/strong&gt;&lt;br /&gt;
 This makes sense if you don't have updated CA certificates which are used by 
 PyPI servers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Downloading packages using &lt;code&gt;wget&lt;/code&gt;.&lt;/strong&gt;&lt;br /&gt;
 This is an alternative way to install Python packages. Download them via &lt;code&gt;wget&lt;/code&gt; 
 and then install them using &lt;code&gt;python setup.py install&lt;/code&gt;. In my case, the server was 
 blacklisted by PyPI so I was getting a 403 Forbidden error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Downloading packages using &lt;code&gt;curl&lt;/code&gt;.&lt;/strong&gt;&lt;br /&gt;
 Alternative to &lt;code&gt;wget&lt;/code&gt;. In my case I didn't get a 403 error but rather it just 
 created invalid tarball files, instead of actually downloading them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Downloading packages using &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;hg&lt;/code&gt;.&lt;/strong&gt;
 If your desired packages have &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;hg&lt;/code&gt; repositories that you can clone, this 
 might work for you.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="python"></category><category term="pip"></category></entry><entry><title>Hello, World!</title><link href="https://bhch.github.io/posts/2017/03/hello-world/" rel="alternate"></link><updated>2017-03-20T00:00:00+05:30</updated><author><name>bhch</name></author><id>tag:bhch.github.io,2017-03-20:posts/2017/03/hello-world/</id><summary type="html">&lt;p&gt;The mandatory first post.&lt;/p&gt;
&lt;p&gt;I still remember the day when I first decided to learn programming. I was so 
sure of which language I will be learning. The &lt;em&gt;inspiration&lt;/em&gt; to learn Python as 
my first programming language came when I was watching the film 
&lt;em&gt;The Social Network&lt;/em&gt;. In a scene, Mark Zuckerberg mentions 
&lt;em&gt;"... python webserver..."&lt;/em&gt;. Then I went on to search &lt;em&gt;"python"&lt;/em&gt; on Google. 
I read about Python on Wikipedia and other online resources. I was really 
fascinated by the number of applications this language had. Plus, the name is cool.
 It bears an air of mystery about itself.&lt;/p&gt;
&lt;p&gt;Here's the first line of code I ever wrote, and perhaps you did too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry></feed>